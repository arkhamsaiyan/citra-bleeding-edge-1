# shallow clone
clone_depth: 10

skip_tags: true

deploy:
  - provider: GitHub
    release: nightly-$(appveyor_build_number)
    description: |
      If you are unsure what to download, download the latest citra-mingw-amd64 zip, extract it and run citra-qt.exe 

      Nightly Build number $(appveyor_build_number)
    auth_token:
      secure: MeBSKRVxvUlkHpCbV+PhpGMmvM2Xh4gkjf4/gWvCtl1ix/VJQPbs7L/PNU7IS66C
    artifact: mingwbuild,msvcbuild
    draft: false
    prerelease: false
    on:
      branch: master
      appveyor_repo_tag: false

environment:
  matrix:
    - BUILD_TYPE: mingw
    - BUILD_TYPE: msvc
  BUILD_PASSWORD:
    secure: EXGNlWKJsCtbeImEJ5EP9qrxZ+EqUFfNy+CP61nDOMA=

cache:
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml

os: Visual Studio 2015

platform:
  - x64

configuration:
  - Release

install:
  - git submodule update --init --recursive
  - ps: |
        if ($env:BUILD_TYPE -eq 'mingw') {
          # redirect err to null to prevent warnings from becoming errors
          # Install in two separate steps as a workaround for cyclical dependancies
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-freetype mingw64/mingw-w64-x86_64-fontconfig" 2> $null
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-cmake mingw64/mingw-w64-x86_64-qt5 mingw64/mingw-w64-x86_64-SDL2" 2> $null
        }

before_build:
  - mkdir %BUILD_TYPE%build
  - cd %BUILD_TYPE%build
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          cmake -G "Visual Studio 14 2015 Win64" -DCITRA_USE_BUNDLED_QT=1 -DCITRA_USE_BUNDLED_SDL2=1 ..
        } else {
          $old_path = $env:Path
          # Change path to just include the mingw gcc and *not* sh.exe (which breaks things when using MinGW Makefiles)
          $env:Path = "C:\msys64\mingw64\bin\;"
          # make sure error output from this command isn't interpreted as an error in powershell
          C:\Windows\System32\cmd /c 'C:\msys64\mingw64\bin\cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DQt5_DIR=C:/msys64/mingw64/qt5/lib/cmake/Qt5/ -DSDL2_INCLUDE_DIR=C:/msys64/mingw64/include/SDL2/ -DSDL2_LIBRARY=C:/msys64/mingw64/bin/SDL2.dll .. 2>&1'
          $env:Path = $old_path
        }
  - cd ..

build_script:
  - ps: |
        if ($env:BUILD_TYPE -eq 'msvc') {
          # https://www.appveyor.com/docs/build-phase
          msbuild msvcbuild/citra.sln /maxcpucount /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        } else {
          $env:Path = "C:\msys64\mingw64\bin\;" + $env:Path
          C:\Windows\System32\cmd /c "C:\msys64\mingw64\bin\mingw32-make -C mingwbuild/ -j${env:NUMBER_OF_PROCESSORS} 2>&1"
        }

test_script:
  - cd %BUILD_TYPE%build && ctest -VV -C Release && cd ..

after_build:
  - ps: |
        if ($env:BUILD_TYPE -eq 'mingw') {
          # Package a zip for mingw build
          $CMAKE_SOURCE_DIR = "$env:APPVEYOR_BUILD_FOLDER"
          $CMAKE_BINARY_DIR = "$CMAKE_SOURCE_DIR/mingwbuild"
          $SQUIRREL_DIR = "$CMAKE_BINARY_DIR/squirrel.win"
          $SQUIRREL_RELEASE_DIR = "$SQUIRREL_DIR/Release"
          $SQUIRREL_BUILD_DIR = "$SQUIRREL_DIR/Build"
          $SQUIRREL_BIN_DIR = "$SQUIRREL_BUILD_DIR/lib/net45"
          
          # make the path we'll copy the output to post build
          New-Item -ItemType Directory -Force -Path $SQUIRREL_BIN_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $SQUIRREL_BUILD_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path $SQUIRREL_RELEASE_DIR | Out-Null

          # First copy the citra exe files and all the dlls to the new release folder
          Get-ChildItem "$CMAKE_BINARY_DIR" -Recurse -Filter "citra*.exe" | Copy-Item -destination $SQUIRREL_BIN_DIR
          $MingwDLLs = "Qt5Core.dll","Qt5Widgets.dll","Qt5Gui.dll","Qt5OpenGL.dll","libbz2-1.dll","libicudt56.dll","libicuin56.dll","libicuuc56.dll","libffi-6.dll","libfreetype-6.dll","libgcc_s_seh-1.dll","libglib-2.0-0.dll","libgobject-2.0-0.dll","libgraphite2.dll","libiconv-2.dll","libharfbuzz-0.dll","libintl-8.dll","libpcre-1.dll","libpcre16-0.dll","libpng16-16.dll","libstdc++-6.dll","libwinpthread-1.dll","SDL2.dll","zlib1.dll"
          foreach ($file in $MingwDLLs) {
            Copy-Item -path "C:/msys64/mingw64/bin/$file" -force -destination "$SQUIRREL_BIN_DIR"
          }
          New-Item -ItemType Directory -Force -Path "$SQUIRREL_BIN_DIR/platforms" | Out-Null
          Copy-Item -path "C:/msys64/mingw64/share/qt5/plugins/platforms/qwindows.dll" -force -destination "$SQUIRREL_BIN_DIR/platforms"
          Copy-Item -path "$CMAKE_SOURCE_DIR/license.txt" -destination "$SQUIRREL_BIN_DIR"
          Copy-Item -path "$CMAKE_SOURCE_DIR/README.md" -destination "$SQUIRREL_BIN_DIR"

          # zip and copy the zip to the root dir so it'll be easier to setup artifcats
          $BUILD_NAME = "citra-mingw-amd64-$(APPVEYOR_REPO_COMMIT).zip"
          7z a -tzip $BUILD_NAME "$SQUIRREL_BIN_DIR/*"
          Copy-Item -path $BUILD_NAME $CMAKE_SOURCE_DIR
        } else {
          # Package a zip for msvc build. Include pdb symbols now that bandwidth isn't a large issue on github releases.
          $BUILD_NAME = "citra-msvc-amd64-$(APPVEYOR_REPO_COMMIT).zip"
          7z a -tzip $BUILD_NAME .\build\bin\release\* .\license.txt .\README.md
          Copy-Item -path $BUILD_NAME $CMAKE_SOURCE_DIR
        }

artifacts:
  - path: citra-msvc-amd64-$(APPVEYOR_REPO_COMMIT).zip
    name: msvcbuild
  - path: citra-mingw-amd64-$(APPVEYOR_REPO_COMMIT).zip
    name: mingwbuild
